import { GetStorageCallbackData, IObject, RemoveStorageFailData, RemoveStorageSuccessData, SetStorageCallbackData } from '@authing/authingmove-core';
/**
 *  全部平台类型：'wx', 'ali', 'baidu', 'qq', 'tt', 'jd', 'ks', 'qa_webview', 'qa_ux', 'Mpx', 'Taro', 'uni'
 *  目前仅执行 wx,tt
 */
export declare enum PlatformsMenu {
    wx = "wx",
    tt = "tt"
}
export declare type Platforms = 'wx' | 'tt';
export interface AuthingOptions {
    appId: string;
    userPoolId: string;
    host?: string;
    platform?: Platforms;
    encryptFunction?: EncryptFunction;
}
export interface EncryptFunction {
    (plainText: string, publicKey: string): string;
}
export declare type PasswordEncryptType = 'none' | 'rsa' | 'sm2';
export declare abstract class IStorageProvider {
    get(key: string): Promise<GetStorageCallbackData>;
    set(key: string, data: unknown): Promise<SetStorageCallbackData>;
    remove(key: string): Promise<RemoveStorageSuccessData | RemoveStorageFailData>;
}
export interface LoginOptions {
    scope?: string;
    context?: IObject;
    tenantId?: string;
    customData?: IObject;
}
export declare enum LoginByCodeConnection {
    wechat_mini_program_code = "wechat_mini_program_code",
    douyin_mini_program_code = "douyin_mini_program_code"
}
export declare enum LoginByPhoneCodeConnection {
    wechat_mini_program_code_and_phone = "wechat_mini_program_code_and_phone",
    douyin_mini_program_code_and_phone = "douyin_mini_program_code_and_phone"
}
export interface PlatformCodeLoginOptions {
    connection?: LoginByCodeConnection;
    extIdpConnidentifier: string;
    wechatMiniProgramCodePayload?: {
        encryptedData: string;
        iv: string;
        code: string;
    };
    douyinMiniProgramCodePayload?: {
        encryptedData: string;
        iv: string;
        code: string;
    };
    options?: LoginOptions;
}
export interface LoginByCodeOptions {
    connection?: LoginByCodeConnection;
    extIdpConnidentifier: string;
    wechatMiniProgramCodePayload?: {
        encryptedData: string;
        iv: string;
    };
    douyinMiniProgramCodePayload?: {
        encryptedData: string;
        iv: string;
    };
    options?: LoginOptions;
}
export interface WxPhoneLoginOptions {
    connection?: 'wechat_mini_program_phone';
    extIdpConnidentifier: string;
    wechatMiniProgramPhonePayload: {
        encryptedData: string;
        iv: string;
        code: string;
    };
    options?: LoginOptions;
}
export interface LoginByPhoneOptions {
    extIdpConnidentifier: string;
    wechatMiniProgramCodeAndPhonePayload?: {
        wxLoginInfo?: {
            encryptedData?: string;
            iv?: string;
        };
        wxPhoneInfo: {
            code: string;
        };
    };
    miniProgramCodeAndPhonePayload?: {
        phoneParams?: {
            code?: string;
            iv: string;
            encryptedData: string;
        };
        wxPhoneInfo?: {
            code: string;
        };
    };
    options?: LoginOptions;
}
export interface PlatformCodeAndPhoneLoginOptions {
    connection: LoginByPhoneCodeConnection;
    extIdpConnidentifier: string;
    wechatMiniProgramCodeAndPhonePayload?: {
        wxLoginInfo: {
            encryptedData: string;
            iv: string;
            code: string;
        };
        wxPhoneInfo: {
            code: string;
        };
    };
    douyinMiniProgramCodeAndPhonePayload?: {
        loginParams?: {
            encryptedData?: string;
            signature?: string;
            iv?: string;
            code: string;
        };
        phoneParams: {
            iv: string;
            encryptedData: string;
        };
    };
    options?: LoginOptions;
}
export interface PasswordLoginOptions {
    connection?: 'PASSWORD';
    passwordPayload: {
        password: string;
        account?: string;
        email?: string;
        username?: string;
        phone?: string;
    };
    options?: {
        passwordEncryptType?: PasswordEncryptType;
        scope?: string;
        clientIp?: string;
        context?: string;
        tenantId?: string;
        customData?: Record<string, unknown>;
        autoRegister?: boolean;
    };
}
export interface PassCodeLoginOptions {
    connection?: 'PASSCODE';
    passCodePayload: {
        passCode: string;
        email?: string;
        phone?: string;
        phoneCountryCode?: string;
    };
    options?: {
        passwordEncryptType?: PasswordEncryptType;
        scope?: string;
        clientIp?: string;
        context?: string;
        tenantId?: string;
        customData?: Record<string, unknown>;
        autoRegister?: boolean;
    };
}
export interface UpdateUserInfo {
    name?: string;
    nickname?: string;
    photo?: string;
    externalId?: string;
    birthdate?: string;
    country?: string;
    province?: string;
    city?: string;
    address?: string;
    streetAddress?: string;
    postalCode?: string;
    gender?: Gender;
    username?: string;
    customData?: Record<string, unknown>;
}
export declare type Gender = 'M' | 'F' | 'U';
export interface UserInfo {
    name?: string;
    nickname?: string;
    photo?: string;
    externalId?: string;
    birthdate?: string;
    country?: string;
    province?: string;
    city?: string;
    address?: string;
    streetAddress?: string;
    postalCode?: string;
    gender?: Gender;
    phone?: string;
    username?: string;
    customData?: any;
    createdAt?: string;
    email?: string;
    emailVerified?: boolean;
    identities?: Array<{
        extIdpId?: string;
        identityId?: string;
        originConnIds?: string[];
        provider?: IdentityProvider;
        type?: string;
        userIdInIdp?: string;
    }>;
    lastIp?: string;
    lastLogin?: string;
    loginsCount?: number;
    passwordLastSetAt?: string;
    phoneCountryCode?: string;
    phoneVerified?: boolean;
    resetPasswordOnNextLogin?: boolean;
    updatedAt?: string;
    userId?: string;
    company?: string;
    region?: string;
    status?: 'Suspended' | 'Resigned' | 'Activated' | 'Archived' | 'Deactivated';
    browser?: string;
    device?: string;
    givenName?: string;
    familyName?: string;
    middleName?: string;
    profile?: string;
    preferredUsername?: string;
    website?: string;
    zoneinfo?: string;
    locale?: string;
    formatted?: string;
    userSourceType?: 'excel' | 'register' | 'adminCreated' | 'syncTask';
    userSourceId?: string;
    lastLoginApp?: string;
    mainDepartmentId?: string;
    lastMfaTime?: string;
    passwordSecurityLevel?: number;
    departmentIds?: string[];
}
export declare type IdentityProvider = 'wechat' | 'qq' | 'wechatwork' | 'dingtalk' | 'weibo' | 'github' | 'alipay' | 'baidu' | 'lark' | 'welink' | 'yidun' | 'qingcloud' | 'google' | 'gitlab' | 'gitee' | 'twitter' | 'facebook' | 'slack' | 'linkedin' | 'instagram' | 'oidc' | 'oauth2' | 'saml' | 'ldap' | 'ad' | 'cas' | 'azure-ad';
export interface GetPhoneOptions {
    extIdpConnidentifier: string;
    code: string;
}
export interface GetDouyinPhoneOptions {
    extIdpConnidentifier: string;
    encryptedData: string;
    iv: string;
    code: string;
}
export declare type SmsChannel = 'CHANNEL_LOGIN' | 'CHANNEL_REGISTER' | 'CHANNEL_RESET_PASSWORD' | 'CHANNEL_BIND_PHONE' | 'CHANNEL_UNBIND_PHONE' | 'CHANNEL_BIND_MFA' | 'CHANNEL_VERIFY_MFA' | 'CHANNEL_UNBIND_MFA' | 'CHANNEL_COMPLETE_PHONE' | 'CHANNEL_IDENTITY_VERIFICATION' | 'CHANNEL_DELETE_ACCOUNT';
export interface SendSmsOptions {
    phoneNumber: string;
    channel: SmsChannel;
    phoneCountryCode?: string;
}
export declare type EmailChannel = 'CHANNEL_LOGIN' | 'CHANNEL_REGISTER' | 'CHANNEL_RESET_PASSWORD' | 'CHANNEL_VERIFY_EMAIL_LINK' | 'CHANNEL_UPDATE_EMAIL' | 'CHANNEL_BIND_EMAIL' | 'CHANNEL_UNBIND_EMAIL' | 'CHANNEL_VERIFY_MFA' | 'CHANNEL_UNLOCK_ACCOUNT' | 'CHANNEL_COMPLETE_EMAIL' | 'CHANNEL_DELETE_ACCOUNT';
export interface SendEmailCodeOptions {
    email: string;
    channel: EmailChannel;
}
export interface RefreshTokenOptions {
    grant_type: 'refresh_token';
    redirect_uri: string;
    refresh_token: string;
}
export interface UpdatePasswordOptions {
    newPassword: string;
    oldPassword: string;
    passwordEncryptType?: PasswordEncryptType;
}
export interface ChangeQrcodeStatusOptions {
    qrcodeId: string;
    action: 'SCAN' | 'CONFIRM' | 'CANCEL';
}
export interface BindEmailOptions {
    email: string;
    passCode: string;
}
export declare type VerifyEmailMethod = 'EMAIL_PASSCODE';
export interface EmailPassCodePayload {
    newEmail: string;
    newEmailPassCode: string;
    oldEmail?: string;
    oldEmailPassCode?: string;
}
export interface UpdateEmailRequestOptions {
    verifyMethod: VerifyEmailMethod;
    emailPassCodePayload: EmailPassCodePayload;
}
export interface UpdateEmailOptions {
    updateEmailToken: string;
}
export interface BindPhoneOptions {
    phoneNumber: string;
    passCode: string;
    phoneCountryCode?: string;
}
export declare type VerifyPhoneMethod = 'PHONE_PASSCODE';
export interface PhonePassCodePayload {
    newPhoneNumber: string;
    newPhonePassCode: string;
    newPhoneCountryCode?: string;
    oldPhoneNumber?: string;
    oldPhonePassCode?: string;
    oldPhoneCountryCode?: string;
}
export interface UpdatePhoneRequestOptions {
    verifyMethod: VerifyPhoneMethod;
    phonePassCodePayload: PhonePassCodePayload;
}
export interface UpdatePhoneOptions {
    updatePhoneToken: string;
}
export declare type DeleteAccountVerifyMethod = 'PHONE_PASSCODE' | 'EMAIL_PASSCODE' | 'PASSWORD';
export interface DeleteAccountRequestOptions {
    verifyMethod: DeleteAccountVerifyMethod;
    phonePassCodePayload?: BindPhoneOptions;
    emailPassCodePayload?: BindEmailOptions;
    passwordPayload?: {
        password: string;
        passwordEncryptType?: PasswordEncryptType;
    };
}
export interface DeleteAccountOptions {
    deleteAccountToken: string;
}
export interface DecryptDataOptions {
    extIdpConnidentifier: string;
    encryptedData: string;
    iv: string;
    code: string;
}
export interface GetAccessTokenOptions {
    appId: string;
    appSecret: string;
}
export interface LoginState {
    access_token: string;
    expires_in: number;
    expires_at: number;
    id_token: string;
    scope: string;
    token_type: string;
    refresh_token?: string;
}
export interface SimpleResponseData {
    message: string;
    statusCode: number;
}
export interface NormalResponseData extends SimpleResponseData {
    data?: {
        data: any;
    };
}
export interface GetUserPhoneResponseData {
    countryCode: string;
    phoneNumber: string;
    purePhoneNumber: string;
    watermark: {
        appid: string;
        timestamp: number;
    };
}
export interface ChangeQrcodeStatusResponseData extends SimpleResponseData {
    apiCode: number;
}
export declare type EncryptType = 'rsa' | 'sm2';
export interface UploadFileResponseData {
    code: number;
    message: string;
    data: {
        key: string;
        url: string;
    };
}
export declare type SDKResponse<T> = SDKResponseSuccess<T> | SDKResponseError;
export declare type SDKResponseSuccess<T> = [null, T];
export declare type SDKResponseError = [ErrorData, undefined];
export interface ErrorData {
    message: string;
    statusCode?: number;
    apiCode?: number;
}
export interface GerUserInfo {
    withDepartmentIds?: boolean;
    withCustomData?: boolean;
    withIdentities?: boolean;
}
export interface BindWxByCodeOptions {
    code?: string;
    iv?: string;
    encryptedData?: string;
    rawData?: string;
    /** 身份源唯一标识 */
    extIdpConnidentifier?: string;
}
export interface BindPlatformByCodeOptions {
    code?: string;
    iv?: string;
    encryptedData?: string;
    rawData?: string;
    /** 身份源唯一标识 */
    extIdpConnidentifier?: string;
}
