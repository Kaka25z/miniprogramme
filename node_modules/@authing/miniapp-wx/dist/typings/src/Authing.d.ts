import { LoginState, EncryptType, AuthingOptions, PasswordLoginOptions, PassCodeLoginOptions, SendSmsOptions, GetPhoneOptions, GetUserPhoneResponseData, UserInfo, UpdatePasswordOptions, UploadFileResponseData, LoginByCodeOptions, SDKResponse, UpdateUserInfo, SimpleResponseData, LoginByPhoneOptions, SendEmailCodeOptions, BindEmailOptions, UpdateEmailOptions, BindPhoneOptions, UpdatePhoneOptions, DeleteAccountOptions, DecryptDataOptions, UpdateEmailRequestOptions, UpdatePhoneRequestOptions, DeleteAccountRequestOptions, GerUserInfo, BindWxByCodeOptions, BindPlatformByCodeOptions, GetDouyinPhoneOptions } from './types';
export declare class Authing {
    private storage;
    private readonly options;
    private readonly encryptFunction?;
    constructor(options: AuthingOptions);
    getLoginState(): Promise<SDKResponse<LoginState>>;
    clearLoginState(): Promise<SDKResponse<boolean>>;
    /**
   *
   * @param loginState 登录用户状态信息
   * @returns
   */
    saveLoginState(loginState: LoginState): Promise<LoginState>;
    getPublicKey(encryptType: EncryptType): Promise<SDKResponse<string>>;
    private getDefaultLoginByCodeConnection;
    private getDefaultLoginByPhoneCodeConnection;
    private getCachedPlatformLoginCode;
    private cachePlatformLoginCode;
    private resetPlatformLoginCode;
    getLoginCode(): Promise<string>;
    loginByCode(data: LoginByCodeOptions): Promise<SDKResponse<LoginState>>;
    loginByPassword(data: PasswordLoginOptions): Promise<SDKResponse<LoginState>>;
    loginByPassCode(data: PassCodeLoginOptions): Promise<SDKResponse<LoginState>>;
    loginByPhone(data: LoginByPhoneOptions): Promise<SDKResponse<LoginState>>;
    logout(): Promise<SDKResponse<boolean>>;
    sendSms(data: SendSmsOptions): Promise<SDKResponse<SimpleResponseData>>;
    sendEmailCode(data: SendEmailCodeOptions): Promise<SDKResponse<SimpleResponseData>>;
    private login;
    refreshToken(): Promise<SDKResponse<LoginState>>;
    updatePassword(data: UpdatePasswordOptions): Promise<SDKResponse<SimpleResponseData>>;
    getUserInfo(data?: GerUserInfo): Promise<SDKResponse<UserInfo>>;
    updateAvatar(): Promise<SDKResponse<UploadFileResponseData>>;
    updateUserInfo(data: UpdateUserInfo): Promise<SDKResponse<UserInfo>>;
    bindWxByCode(data: BindWxByCodeOptions): Promise<import("./types").SDKResponseError | import("./types").SDKResponseSuccess<any>>;
    bindPlatformByCode(data: BindPlatformByCodeOptions): Promise<import("./types").SDKResponseError | import("./types").SDKResponseSuccess<any>>;
    bindEmail(data: BindEmailOptions): Promise<import("./types").SDKResponseError | import("./types").SDKResponseSuccess<any>>;
    updateEmailRequest(data: UpdateEmailRequestOptions): Promise<import("./types").SDKResponseError | import("./types").SDKResponseSuccess<any>>;
    updateEmail(data: UpdateEmailOptions): Promise<import("./types").SDKResponseError | import("./types").SDKResponseSuccess<any>>;
    bindPhone(data: BindPhoneOptions): Promise<import("./types").SDKResponseError | import("./types").SDKResponseSuccess<any>>;
    updatePhoneRequest(data: UpdatePhoneRequestOptions): Promise<import("./types").SDKResponseError | import("./types").SDKResponseSuccess<any>>;
    updatePhone(data: UpdatePhoneOptions): Promise<import("./types").SDKResponseError | import("./types").SDKResponseSuccess<any>>;
    deleteAccountRequest(data: DeleteAccountRequestOptions): Promise<import("./types").SDKResponseError | import("./types").SDKResponseSuccess<any>>;
    deleteAccount(data: DeleteAccountOptions): Promise<import("./types").SDKResponseError | import("./types").SDKResponseSuccess<any>>;
    getPhone(data: GetPhoneOptions | GetDouyinPhoneOptions): Promise<SDKResponse<GetUserPhoneResponseData>>;
    decryptData(data: DecryptDataOptions): Promise<import("./types").SDKResponseError | import("./types").SDKResponseSuccess<any>>;
    /**
   * 因为会有一下接口地址变更
   * 涉及到的 api  接口地址
   * */
    private getApiUrlMapping;
}
